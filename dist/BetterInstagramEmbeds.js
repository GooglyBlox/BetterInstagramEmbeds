const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const k=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const M=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const w=o.Text;o.TextInput,o.TouchableHighlight;const p=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const y=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const D=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const r=o.FormRow,h=o.FormSection;o.FormSelect,o.FormSubLabel;const U=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;function V(e){window.enmity.plugins.registerPlugin(e)}const d=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets;const O=window.enmity.modules.common.Messages;window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const f=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const _=window.enmity.modules.common.Storage,S=window.enmity.modules.common.Toasts,T=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const F=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users,window.enmity.modules.common.Navigation,window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const I=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes,window.enmity.modules.common.Moment;function G(e){return window.enmity.patcher.create(e)}const v={byProps:(...e)=>window.enmity.modules.filters.byProps(...e),byName:(e,t)=>window.enmity.modules.filters.byName(e,t),byTypeName:(e,t)=>window.enmity.modules.filters.byTypeName(e,t),byDisplayName:(e,t)=>window.enmity.modules.filters.byDisplayName(e,t)};function P(...e){return window.enmity.modules.bulk(...e)}function Y(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;const L=e=>{let t=0;for(let a in e)t++;return t};function i(e){return window.enmity.assets.getIDByName(e)}const c={Debug:i("debug"),Retry:i("ic_message_retry"),Failed:i("Small"),Cancel:i("ic_megaphone_nsfw_16px"),Add:i("add_white"),Delete:i("ic_message_delete"),Clear:i("ic_clear_all_24px"),Pencil:i("ic_pencil_24px"),Success:i("ic_selection_checked_24px"),Warning:i("ic_warning_24px"),Copy:i("toast_copy_link"),Open:i("ic_leave_stage"),Clipboard:i("pending-alert"),Initial:i("coffee"),Shield:i("ic_person_shield"),Debug_Command:{Sent:i("ic_application_command_24px"),Clock:i("clock")},Settings:{Toasts:{Context:i("toast_image_saved"),Settings:i("ic_selection_checked_24px")},Self:i("friends_toast_icon"),Share:i("share"),Robot:i("ic_robot_24px"),Commands:i("ic_profile_badge_bot_commands"),Debug:i("ic_rulebook_16px")}},x=e=>{S.open({content:`Copied ${e} to clipboard.`,source:c.Clipboard})},z=e=>{let t=e.split(`
`).map(a=>{if(a!="")return`"${a.replaceAll(":",'":"').replace(" ","")}",`});return t[0]=`{${t[0]}`,t[L(t)]=`${t[L(t)]}}`,t=t.join(""),t=t.replaceAll("undefined",""),t=t.split("").reverse().join("").replace(",","").split("").reverse().join(""),t};async function j(){try{let e=await _.getItem("device_list");if(e)return JSON.parse(e);let t=(await F.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,a=z(t);await _.setItem("device_list",a);let s=await _.getItem("device_list");return JSON.parse(s)}catch(e){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${e}]`);return}}async function W(e,t,a){let s=await j();return`**[${e}] Debug Information**
> **Plugin Version:** ${t}
> **Plugin Build:** ${a.split("-")[1]}
> **Discord Build:** ${f.InfoDictionaryManager.Version} (${f.InfoDictionaryManager.Build})
> **Software Version:** ${f.DCDDeviceManager.systemVersion}
> **Device:** ${s[f.DCDDeviceManager.device]}`}const{native:b}=window.enmity;function H(){b.reload()}b.version,b.build,b.device,b.version;const J=Y("transitionToGuild");async function q({manifest:e}){const t=`${e.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,a=await(await F.get(t)).text;let s=a.match(/\d\.\d\.\d+/g),l=a.match(/patch\-\d\.\d\.\d+/g);return!s||!l?R(e.name,e.version):(s=s[0],l=l[0],s!=e.version?A(t,s,l.split("-")[1],e,!1):l!=e.build?A(t,s,l.split("-")[1],e,!0):R(e.name,e.version))}const A=(e,t,a,s,l)=>{const u=l?a:t;T.show({title:"Update found",body:`A newer ${l?"build":"version"} is available for ${s.name}. ${l?`
The version will remain at ${t}, but the build will update to ${a}.`:""}
Would you like to install ${l?`build \`${a}\``:`version \`${t}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>K(e,u,s,l)})},R=(e,t)=>{console.log(`[${e}] Plugin is on the latest version, which is ${t}`),S.open({content:`${e} is on latest version (${t})`,source:c.Success})};async function K(e,t,a,s){window.enmity.plugins.installPlugin(e,({data:l})=>{l=="installed_plugin"||l=="overridden_plugin"?T.show({title:`Updated ${a.name}`,body:`Successfully updated to ${s?"build":"version"} \`${t}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{H()}}):T.show({title:"Error",body:`Something went wrong while updating ${a.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{J.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${a.name}%20Update%20Error%3A%20${s?`b${t}`:`v${t}`}`)}})})}const E=window.enmity.modules.common.Components.General.Animated,[$,X]=P(v.byProps("transitionToGuild"),v.byProps("setString")),m=I.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25,fontFamily:d.Fonts.DISPLAY_NORMAL},header:{color:d.ThemeColorMap.HEADER_PRIMARY,fontFamily:d.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:d.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}});var Q=({manifest:e})=>{const t=n.useRef(new E.Value(1)).current,a=()=>{E.spring(t,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{E.spring(t,{toValue:1,duration:250,useNativeDriver:!0}).start()},l=()=>{$.openURL("https://spin.rip/")},u={transform:[{scale:t}]};return n.createElement(n.Fragment,null,n.createElement(y,{style:m.container},n.createElement(p,{onPress:l,onPressIn:a,onPressOut:s},n.createElement(E.View,{style:[u]},n.createElement(k,{style:[m.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(y,{style:m.text_container},n.createElement(p,{onPress:()=>{$.openURL(e.sourceUrl)}},n.createElement(w,{style:[m.main_text,m.header]},e.name," ")),n.createElement(y,{style:{flexDirection:"row"}},n.createElement(w,{style:[m.main_text,m.sub_header]},"A plugin by"),n.createElement(p,{onPress:()=>{$.openURL("https://spin.rip/")}},n.createElement(w,{style:[m.main_text,m.sub_header,{paddingLeft:4,fontFamily:d.Fonts.DISPLAY_BOLD}]},e.authors[0].name))),n.createElement(y,{style:{flexDirection:"row"}},n.createElement(w,{style:[m.main_text,m.sub_header]},"Settings page by"),n.createElement(p,{onPress:()=>{$.openURL("https://github.com/acquitelol/")}},n.createElement(w,{style:[m.main_text,m.sub_header,{paddingLeft:4,fontFamily:d.Fonts.DISPLAY_BOLD}]},"Rosie<3"))),n.createElement(y,null,n.createElement(p,{style:{flexDirection:"row"},onPress:()=>{X.setString(`**${e.name}** v${e.version}`),x("plugin name and version")}},n.createElement(w,{style:[m.main_text,m.sub_header]},"Version:"),n.createElement(w,{style:[m.main_text,m.sub_header,{paddingLeft:4,fontFamily:d.Fonts.DISPLAY_BOLD}]},e.version," "))))))};const[Z,B]=P(v.byProps("transitionToGuild","openURL"),v.byProps("setString","getString")),g=I.createThemedStyleSheet({bottom_padding:{paddingBottom:25},icon:{color:d.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:d.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}});var ee=({manifest:e,settings:t,hasToasts:a,children:s,commands:l})=>n.createElement(M,null,n.createElement(Q,{manifest:e}),s,l&&n.createElement(h,{title:"Plugin Commands"},l.map(u=>n.createElement(r,{label:`/${u.name}`,subLabel:u.description,leading:n.createElement(r.Icon,{style:g.icon,source:c.Settings.Commands}),trailing:r.Arrow,onPress:function(){B.setString(`/${u.name}`),x(`the command ${u.name}`)}}))),n.createElement(h,{title:"Utility"},a&&n.createElement(n.Fragment,null,n.createElement(r,{label:"Initialization Toasts",leading:n.createElement(r.Icon,{style:g.icon,source:c.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${e.name} is starting`,trailing:n.createElement(U,{value:t.getBoolean(`${e.name}-toastEnable`,!1),onValueChange:()=>{t.toggle(`${e.name}-toastEnable`,!1),S.open({content:`Successfully ${t.getBoolean(`${e.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:c.Success})}})}),n.createElement(D,null)),n.createElement(r,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${e.name} to clipboard.`,leading:n.createElement(r.Icon,{style:g.icon,source:c.Settings.Debug}),trailing:r.Arrow,onPress:async function(){B.setString(await W(e.name,e.version,e.build)),x("plugin debug information")}}),n.createElement(D,null),n.createElement(r,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(r.Icon,{style:g.icon,source:c.Delete}),trailing:r.Arrow,onPress:async function(){await _.removeItem("device_list"),S.open({content:"Cleared device list storage.",source:c.Success})}})),n.createElement(h,{title:"Source"},n.createElement(r,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${e.name}.`,leading:n.createElement(r.Icon,{style:g.icon,source:c.Copy}),trailing:r.Arrow,onPress:()=>{q({manifest:e})}}),n.createElement(D,null),n.createElement(r,{label:"Source",subLabel:`View ${e.name} source code`,leading:n.createElement(r.Icon,{style:g.icon,source:c.Open}),trailing:r.Arrow,onPress:()=>{Z.openURL("https://github.com/GooglyBlox/BetterInstagramEmbeds")}})),n.createElement(r,{style:g.bottom_padding,label:`Plugin Version: ${e.version}
Plugin Build: ${e.build.split("-").pop()}`})),te="BetterInstagramEmbeds",ne="1.0.0",oe="patch-1.0.16",ie="Convert Instagram links to ddInstagram links so the embed is better.",ae=[{name:"GooglyBlox",id:"327559129705218049"}],se="#ff0069",le="",C={name:te,version:ne,build:oe,description:ie,authors:ae,color:se,sourceUrl:le};const N=G(C.name),re={...C,onStart(){try{N.before(O,"sendMessage",(e,t,a)=>{const s=t[1].content;!s.match(/http(s)?:\/\/(www\.)?instagram\.com\/\w{4,15}\/p\/\w+/gim)||(t[1].content=s.replace(/http(s)?:\/\/(www\.)?instagram\.com/gim,"https://www.ddinstagram.com"))})}catch(e){console.log("[ BetterInstagramEmbeds Error ]",e)}},onStop(){N.unpatchAll()},patches:[],getSettingsPanel({settings:e}){return n.createElement(ee,{manifest:C,settings:e,hasToasts:!1,commands:null},n.createElement(h,{title:"Plugin Settings"}))}};V(re);